#!/usr/bin/perl
use warnings;
use strict;
use FindBin qw($RealBin);
use lib $RealBin;
use Sound::Library;
use Sound::SoundPlayer;
  
########################################################################
#
# Copyright Simon Andrews 2016
#
# This file is part of RasbellyPi.
#
# RasbellyPi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Foobar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RasbellyPi.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################


############ DEBUG ################
# Set this to 1 to enable debugging
#
my $debug = 1;
###################################


my $magic_number = read_magic_number();


my $library = new Sound::Library("$RealBin/Sounds");

{

  my $network_test = system("host www.google.com > /dev/null 2>&1");

  if ($network_test == 0) {
    # They've probably set the clock
    (new Sound::SoundPlayer()) ->play_sound("$RealBin/Notifications/ready.mp3");
  }
  else {
    # There's no clock set
    (new Sound::SoundPlayer()) ->play_sound("$RealBin/Notifications/ready_no_network.mp3");
  }

  # We'll also get the system to say the date

  my ($day,$month,$year) = (localtime())[3,4,5];

  my @months = qw(January February March April May June July August September October November December);
  $year += 1900;

  # To make the year easier to hear we'll split it into two numbers
  my $year1 = substr($year,0,2);
  my $year2 = substr($year,2,2);

  # We'll add the appropriate extension to the day
  $day =~ s/1$/1st/;
  $day =~ s/2$/2nd/;
  $day =~ s/3$/3rd/;
  $day =~ s/(\d)$/${1}nd/;
  
  my $date_phrase = "$day $months[$month] $year1 $year2";

  $debug and warn "Date is '$date_phrase'\n";

  system("speak \"$date_phrase\" > /dev/null 2>&1") == 0 or warn "Failed to say the date";
  
  
}

# Main event loop

while (1) {

  # This command will block until a button press is received
  my $number = `RFSniffer`;
  
  chomp $number;

  $debug and warn "Received a signal with magic number '$number'\n";
  
  unless ($number =~ /^\d+$/) {
    warn "Output of RFSniffer was not a number, it was '$number'";
    next;
  }

  
  if ($magic_number == 0 || $magic_number == $number) {
    # Play a sound
    $library -> play_sound();
    $debug and warn "Key was pressed\n";
  }
  else {
    $debug and warn "Got a signal from someone else's bell\n";
  }
    

}

sub read_magic_number {

  open (my $magic, "$RealBin/magic_number.txt") or do {
    warn "Couldn't read magic number file: $! - will respond to any bell - not just yours\n";
    return 0;
  };

  my $line = <$magic>;
  close $magic;

  unless ($line) {
    warn "First line of magic_number.txt was empty - will respond to any bell - not just yours\n";
    return 0;
  }
  
  if ($line =~ /^Magic number =\s*(\d+)/) {
    return $1;
  }
  else {
    warn "First line of magic_number.txt didn't have the expected format - will respond to any bell - not just yours\n";
    return 0;    
  }
  
}





